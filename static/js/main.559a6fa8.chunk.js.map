{"version":3,"sources":["components/getData/getData.ts","components/Todo/Todo.tsx","store.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["getCommonData","url","a","fetch","response","json","getData","users","todos","map","todo","user","find","id","userId","Todo","props","deleteTodo","className","name","title","completed","type","onClick","initialSate","isLoading","store","createStore","state","action","filter","idTodos","mapDispatchToProps","connect","key","dispatch","setIsLoading","setIsLoad","setTodos","setTodosWithUsers","handleStart","todosFromServer","filterForAll","filterType","sort","b","localeCompare","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.559a6fa8.chunk.js","sourcesContent":["const URL_USERS = 'https://jsonplaceholder.typicode.com/users';\nconst URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\n\nconst getCommonData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getCommonData(URL_USERS);\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getCommonData(URL_TODOS);\n};\n\nexport const getData = async (): Promise<TodoWithUser[]> => {\n  const users = await getUsers();\n  const todos = await getTodos();\n\n  return todos.map((todo: Todo) => {\n    return {\n      ...todo,\n      user: users.find((user: User) => user.id === todo.userId) as User,\n    };\n  });\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n  deleteTodo: (value: number) => void;\n}\n\nexport const Todo: FC<Props> = (props) => {\n  const { todo, deleteTodo } = props;\n\n  const handleDelete = () => {\n    deleteTodo(todo.id);\n  };\n\n  return (\n    <tr>\n      <td className=\"cell\">{todo.user.name}</td>\n      <td className=\"cell\">{todo.title}</td>\n      <td className=\"cell\">{`${todo.completed}`}</td>\n      <td className=\"cell\">\n        <button\n          type=\"button\"\n          onClick={handleDelete}\n        >\n          delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { AnyAction, createStore } from 'redux';\n\nconst IS_LOADING = 'IS_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const setIsLoad = (isLoading: boolean) => ({ type: IS_LOADING, isLoading });\nexport const setTodosWithUsers = (todos: TodoWithUser[] | []) => ({ type: SET_TODOS, todos });\nexport const deleteSomeTodo = (idTodos: number) => ({ type: DELETE_TODO, idTodos });\n\nexport interface State {\n  todos: TodoWithUser[] | [];\n  isLoading: boolean;\n}\n\nconst initialSate: State = {\n  todos: [],\n  isLoading: false,\n};\n\n\nconst reducerTodos = (state: State = initialSate, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo: TodoWithUser) => todo.id !== action.idTodos),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducerTodos, initialSate);\n\nexport default store;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Todo } from '../Todo';\nimport { deleteSomeTodo } from '../../store';\n\ninterface Props {\n  todos: TodoWithUser[];\n  deleteTodo: (value: number) => void;\n}\n\nconst TodoList: FC<Props> = (props) => {\n  const { todos, deleteTodo } = props;\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th className=\"cell cell__head\">Name</th>\n          <th className=\"cell cell__head\">Title</th>\n          <th className=\"cell cell__head\">completed</th>\n          <th className=\"cell cell__head\">Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <Todo key={todo.id} todo={todo} deleteTodo={deleteTodo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = { deleteTodo: deleteSomeTodo };\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport './App.css';\nimport { getData } from './components/getData/getData';\nimport TodoList from './components/TodoList/TodoList';\nimport { State, setIsLoad, setTodosWithUsers } from './store';\n\ninterface Props {\n  todos: TodoWithUser[] | [];\n  setTodos: (value: TodoWithUser[]) => void;\n  isLoading: boolean;\n  setIsLoading: (value: boolean) => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    todos,\n    setTodos,\n    isLoading,\n    setIsLoading,\n  } = props;\n\n  const handleStart = async () => {\n    setIsLoading(true);\n    const todosFromServer = await getData();\n\n    setTodos(todosFromServer);\n    setIsLoading(false);\n  };\n\n  const filterForAll = (filterType: string) => {\n    switch (filterType) {\n      case 'title':\n        setTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'name':\n        setTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'completed':\n        setTodos([...todos]\n          .sort((a, b) => +a.completed - +b.completed));\n        break;\n      default:\n    }\n  };\n\n  if (!todos.length) {\n    return (\n      <div className=\"app\">\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={handleStart}\n        >\n          {(isLoading) ? 'Loading....' : 'Add'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"buttons-box\">\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={() => filterForAll('title')}\n        >\n          Filter Title\n        </button>\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={() => filterForAll('name')}\n        >\n          Filter Name\n        </button>\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={() => filterForAll('completed')}\n        >\n          Filter Completed\n        </button>\n      </div>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setIsLoading: (isLoading: boolean) => dispatch(setIsLoad(isLoading)),\n  setTodos: (todos: TodoWithUser[] | []) => dispatch(setTodosWithUsers(todos)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}