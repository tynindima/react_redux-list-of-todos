{"version":3,"sources":["components/Todo/Todo.tsx","components/getData/getData.ts","store.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["Todo","props","todo","deleteTodo","className","user","name","title","completed","type","onClick","id","getCommonData","url","a","fetch","response","json","getData","users","todos","map","find","userId","setIsLoad","isLoading","initialSate","store","createStore","state","action","sort","b","localeCompare","filter","idTodos","applyMiddleware","thunk","mapDispatchToProps","connect","key","loadedTodos","dispatch","todosFromServer","setFilterByTitle","setFilterByName","setFilterByCompleted","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e113778.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n  deleteTodo: (value: number) => void;\n}\n\nexport const Todo: FC<Props> = (props) => {\n  const { todo, deleteTodo } = props;\n\n  const handleDelete = () => {\n    deleteTodo(todo.id);\n  };\n\n  return (\n    <tr>\n      <td className=\"cell\">{todo.user.name}</td>\n      <td className=\"cell\">{todo.title}</td>\n      <td className=\"cell\">{`${todo.completed}`}</td>\n      <td className=\"cell\">\n        <button\n          type=\"button\"\n          onClick={handleDelete}\n        >\n          delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n","const URL_USERS = 'https://jsonplaceholder.typicode.com/users';\nconst URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\n\nconst getCommonData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getCommonData(URL_USERS);\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getCommonData(URL_TODOS);\n};\n\nexport const getData = async (): Promise<TodoWithUser[]> => {\n  const users = await getUsers();\n  const todos = await getTodos();\n\n  return todos.map((todo: Todo) => {\n    return {\n      ...todo,\n      user: users.find((user: User) => user.id === todo.userId) as User,\n    };\n  });\n};\n","import {\n  AnyAction, createStore, applyMiddleware, Dispatch,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { getData } from './components/getData/getData';\n\nconst SET_IS_LOADING = 'IS_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\nconst FILTER_BY_TITLE = 'FILTER_BY_TITLE';\nconst FILTER_BY_NAME = 'FILTER_BY_NAME';\nconst FILTER_BY_COMPLETE = 'FILTER_BY_COMPLETE';\n\nexport const setIsLoad = (isLoading: boolean) => ({ type: SET_IS_LOADING, isLoading });\nexport const setTodosWithUsers = (todos: TodoWithUser[] | []) => ({ type: SET_TODOS, todos });\nexport const deleteSomeTodo = (idTodos: number) => ({ type: DELETE_TODO, idTodos });\nexport const filterByTitle = () => ({ type: FILTER_BY_TITLE });\nexport const filterByName = () => ({ type: FILTER_BY_NAME });\nexport const filterByComplete = () => ({ type: FILTER_BY_COMPLETE });\n\nexport interface State {\n  todos: TodoWithUser[] | [];\n  isLoading: boolean;\n}\n\nconst initialSate: State = {\n  todos: [],\n  isLoading: false,\n};\n\nexport const loadTodos = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoad(true));\n    const todosFromServer = await getData();\n\n    dispatch(setTodosWithUsers(todosFromServer));\n    dispatch(setIsLoad(false));\n  };\n};\n\n\nconst reducerTodos = (state: State = initialSate, action: AnyAction) => {\n  switch (action.type) {\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    case FILTER_BY_TITLE:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .sort((a, b) => a.title.localeCompare(b.title)),\n      };\n    case FILTER_BY_NAME:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .sort((a, b) => +a.completed - +b.completed),\n      };\n    case FILTER_BY_COMPLETE:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo: TodoWithUser) => todo.id !== action.idTodos),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducerTodos,\n  initialSate,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Todo } from '../Todo';\nimport { deleteSomeTodo } from '../../store';\n\ninterface Props {\n  todos: TodoWithUser[];\n  deleteTodo: (value: number) => void;\n}\n\nconst TodoList: FC<Props> = (props) => {\n  const { todos, deleteTodo } = props;\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th className=\"cell cell__head\">Name</th>\n          <th className=\"cell cell__head\">Title</th>\n          <th className=\"cell cell__head\">completed</th>\n          <th className=\"cell cell__head\">Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <Todo key={todo.id} todo={todo} deleteTodo={deleteTodo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = { deleteTodo: deleteSomeTodo };\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport TodoList from './components/TodoList/TodoList';\nimport {\n  State,\n  filterByTitle,\n  filterByName,\n  filterByComplete,\n  loadTodos,\n} from './store';\n\ninterface Props {\n  todos: TodoWithUser[] | [];\n  isLoading: boolean;\n  setFilterByTitle: () => void;\n  setFilterByName: () => void;\n  setFilterByCompleted: () => void;\n  loadedTodos: () => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    loadedTodos,\n    todos,\n    isLoading,\n    setFilterByTitle,\n    setFilterByName,\n    setFilterByCompleted,\n  } = props;\n\n  const handleStart = () => {\n    loadedTodos();\n  };\n\n  if (!todos.length) {\n    return (\n      <div className=\"app\">\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={handleStart}\n        >\n          {isLoading ? 'Loading....' : 'Add'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"buttons-box\">\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={setFilterByTitle}\n        >\n          Filter Title\n        </button>\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={setFilterByName}\n        >\n          Filter Name\n        </button>\n        <button\n          className=\"button is-info\"\n          type=\"button\"\n          onClick={setFilterByCompleted}\n        >\n          Filter Completed\n        </button>\n      </div>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = {\n  loadedTodos: loadTodos,\n  setFilterByTitle: filterByTitle,\n  setFilterByName: filterByName,\n  setFilterByCompleted: filterByComplete,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}